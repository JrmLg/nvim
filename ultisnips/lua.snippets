# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

priority 2
snippet autocmd "Insert an autocommand vim." i
vim.api.nvim_create_autocmd({ "${1:eventName}" }, {
    desc = "${2:Description}",
    pattern = { "${3:filePattern}" },

    callback = function()
	-- Lua code
    end,

    command = "${4:OrACommandString}",
})
endsnippet

priority 2
snippet keymap "Insert a new vim keymap" i
vim.keymap.set("${2:n}", "${3}", "${4}", {
	silent = false,
	noremap = true,
	desc = "${1:A short description}",
})
endsnippet


priority 1
snippet '(-*\s*-*)?(([^-\s]?\s*\-?)+)(\s*-*)?' "Format title in lua file" ir
`!p
title = match.group(2)
title = title.strip("-")
title = title.strip()
title = title.capitalize()

title = ' '.join(title.split(' '))
title = f" {title} "

snip.rv = f'--{title.center(72, "-")}--'
`${1}
endsnippet
