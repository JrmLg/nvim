# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt


priority 4
snippet cl "Console.log" w
console.log(${1})
endsnippet

snippet '(\w+)\.(to)?json' "Transform un objet en JSON." ir
`!p
variable_name = match.group(1)
have_to = match.group(2) is not None

if have_to:
		snip.rv = f"let json_{variable_name} = JSON.stringify({variable_name});"
else:
		snip.rv = f"JSON.stringify({variable_name})"
`${1}
endsnippet


priority 2
snippet '\bl\s*((\s*\w+)*)?\s*' "Insert la définition d'une lambda" wr
`!p
arguments = match.group(1)
arguments = ", ".join(arguments.split())
snip.rv=f"({arguments}) => "
`{${1}}
endsnippet


priority 3
snippet '\b(e\s*)?(d\s*)?(function|func|fn|f)((\s*\*\s*|\s*)(\w*)((\s*\w+)*))\s*'  "Insert la définition d'une fonction." ir
`!p
export = match.group(1) is not None
default = match.group(2) is not None
exportInfo = 'export default ' if default else 'export ' if export else ''
is_generator = "*" in match.group(5)
func_name = match.group(6)
func_name = func_name.replace(',', '')
func_name = "" if len(func_name) == 0 else func_name.strip()
arguments = match.group(7)
arguments = ", ".join(arguments.split())

snip.rv = f"{exportInfo}function{'*' if is_generator else ''} {func_name}({arguments}) "
`{${1}}
endsnippet

priority 4
snippet for "Insert a for loop." i
for (let ${1:i} = 0; $1 < ${2:10}; $1++){
    ${3}
}
endsnippet

priority 4
snippet forin "Insert a for in loop." i
for (let ${1:prop} in ${2:object}){
    ${3}
}
endsnippet

priority 4
snippet forof "Insert a for of loop." i
for (let ${1:prop} of ${2:object}){
    ${3}
}
endsnippet

priority 1
snippet 'get\s*(\w+)\s*([\w\._\-\d]+\s*)?' "Insert un getter." r
`!p
attr_name = match.group(1)
priv_name = f"_{attr_name}" if match.group(2) is None else match.group(2)
`get `!p snip.rv=attr_name`() {
    return ${1:this.`!p snip.rv=priv_name`}
}
${2}
endsnippet


priority 1
snippet 'set\s*(\w+)\s*([\w\._\-\d]+\s*)?' "Insert un setter." ir
`!p
attr_name = match.group(1)
priv_name = f"_{attr_name}" if match.group(2) is None else match.group(2)
new_value = f"new_{attr_name}"
`set `!p snip.rv=attr_name`(`!p snip.rv=new_value`) {
    if (`!p snip.rv=new_value` !== this.`!p snip.rv=priv_name`) {
        this.`!p snip.rv=priv_name` = `!p snip.rv=new_value`
    }
}
${1}
endsnippet


priority 2
snippet '(gs|sg)et\s*(\w+)\s*([\w\._\-\d]+\s*)?' "Insert un getter et un setter." ir
`!p
attr_name = match.group(2)
priv_name = f"_{attr_name}" if match.group(3) is None else match.group(3)
new_value = f"new_{attr_name}"
`get `!p snip.rv=attr_name`() {
    return this.`!p snip.rv=priv_name`
}

set `!p snip.rv=attr_name`(`!p snip.rv=new_value`) {
    if (`!p snip.rv=new_value` !== this.`!p snip.rv=priv_name`) {
        this.`!p snip.rv=priv_name` = `!p snip.rv=new_value`
    }
}
${1}
endsnippet

priority 3
snippet '(e\s*)?(d\s*)?c\s*(\w+)\s*(\w+|,)?\s*([\w\s]+)?\s*' "Insert une classe" br
`!p
export = match.group(1) is not None
default = match.group(2) is not None
exportInfo = 'export default ' if default else 'export ' if export else ''
class_name = match.group(3)
class_name = class_name.capitalize()
parent_class = match.group(4)
parent_class = None if parent_class == "," else parent_class
have_parent = parent_class != None
attributs = match.group(5)
have_attributs = attributs is not None
if (have_attributs):
		lst_attr = attributs.split()
		is_private = [a.startswith('_') for a in lst_attr]
		lst_attr = [a.strip('_') for a in lst_attr]
		attributs = ", ".join(lst_attr)

if (have_parent):
		parent_class = parent_class.capitalize()

snip.rv=exportInfo
`class `!p snip.rv=class_name` `!p snip.rv="" if not have_parent else f"extends {parent_class}"`{

    constructor(`!p snip.rv=attributs if have_attributs else ''`${1}) {
		`!p snip.rv= (8 * " ").join([f"this.{'_' if prv else ''}{a} = {a};\n" for a, prv in zip(lst_attr, is_private)] + [""]) if not have_parent and have_attributs else ""``!p snip.rv=f"super({attributs if have_attributs else ''}" if have_parent else ""`${2}`!p snip.rv=");" if have_parent else ""`
    }${3}
}

endsnippet

snippet /**  "Multiline comment" iA
/**${1}*/
endsnippet

snippet '(\s*)create\s+((\w+\s*)+)' "Crée un Element HTML depuis document" r
`!p
indend = match.group(1)

elements = match.group(2)
elements = elements.strip().split()

result = [f"{indend}const {e} = document.createElement('{e}')" for e in elements]
snip.rv = "\n".join(result)
`
${1}
endsnippet

snippet "(router|app)\.(all|delete|get|post|put)" "Ajoute une route express.js" rA
`!p
router = match.group(1)
routeType = match.group(2)
snip.rv=f"{router}.{routeType}"`("/${1:index}", (req, res) => {
    ${2}
})
endsnippet

snippet routerExpress "Ajoute la définition d'un nouveau router express.js" i
import express from 'express'

import db from "../db/models/index.js"

export default [
    '/`!p snip.rv=snip.basename`',
    /** @param {express.Router} router */
    (router) => {

    router.get('/', (req, res) => {
        ${1}
    })

}] // End router
endsnippet
